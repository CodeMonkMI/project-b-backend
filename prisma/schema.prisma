// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum user_type {
  super_admin
  admin
  user
}

model Role {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  role      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model User {
  id                       String              @id @default(uuid()) @map("_id")
  username                 String              @unique
  email                    String              @unique
  password                 String
  roleId                   String
  role                     Role                @relation(fields: [roleId], references: [id])
  Profile                  Profile?
  isVerified               Boolean             @default(false)
  isDelete                 Boolean             @default(false)
  deleteAt                 DateTime?
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  ResetPassword            ResetPassword[]
  Featured                 Featured?
  Activity                 Activity[]
  DonationGivenHistory     DonationHistory[]   @relation("donationGivenBy")
  DonationRequestedHistory DonationHistory[]   @relation("donationRequester")
  DonationReadingHistory   DonationHistory[]   @relation("donationReader")
  DonationRequested        DonationRequested[] @relation(name: "requestedBy")
  DonationVerified         DonationRequested[] @relation(name: "verifiedBy")
  NotificationCreated      Notification[]      @relation(name: "createdBy")
  recievedNotificationIds  String[]
  NotificationRecieved     Notification[]      @relation(name: "reciever", fields: [recievedNotificationIds], references: [id])
  readsNotificationIds     String[]
  NotificationReads        Notification[]      @relation(name: "reader", fields: [readsNotificationIds], references: [id])
}

model ResetPassword {
  id        String   @id @default(uuid()) @map("_id")
  token     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum blood_type {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

model Profile {
  id            String     @id @default(uuid()) @map("_id")
  firstName     String
  lastName      String
  displayName   String?
  fatherName    String?
  motherName    String?
  address       String?
  streetAddress String?
  upzila        String?
  zila          String?
  phoneNo       String?
  lastDonation  DateTime?
  bloodGroup    blood_type
  image         String?
  userId        String     @unique
  user          User       @relation(fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Featured {
  id        String    @id @default(uuid()) @map("_id")
  start     DateTime?
  end       DateTime?
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  deleteAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DonationHistory {
  id            String   @id @default(uuid()) @map("_id")
  date          DateTime
  address       String?
  streetAddress String
  upzila        String
  zila          String
  phoneNo       String?
  reason        String
  userId        String
  user          User     @relation("donationGivenBy", fields: [userId], references: [id])
  requestedId   String?
  request       User?    @relation("donationRequester", fields: [requestedId], references: [id])
  readBydId     String[]
  readBy        User     @relation("donationReader", fields: [readBydId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum donation_status {
  request
  verified
  progress
  ready
  hold
  completed
}

model DonationRequested {
  id            String          @id @default(uuid()) @map("_id")
  requestedById String
  requestedBy   User            @relation(fields: [requestedById], references: [id], name: "requestedBy")
  firstName     String
  lastName      String
  email         String
  phone         String
  address       String
  date          DateTime
  blood         String
  reason        String
  verifiedById  String
  verifiedBy    User            @relation(fields: [verifiedById], references: [id], name: "verifiedBy")
  status        donation_status

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id          String   @id @default(uuid()) @map("_id")
  message     String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String   @id @default(uuid()) @map("_id")
  message     String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], name: "createdBy")
  receiverId  String[]
  reciever    User[]   @relation(fields: [receiverId], references: [id], name: "reciever")
  readerId    String[]
  readers     User[]   @relation(fields: [readerId], references: [id], name: "reader")
  isAll       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
